@using Syncfusion.JavaScript.DataVisualization

@section SampleHeading{<span class="sampleName">XlsIO-CLR Objects-ASP.NET MVC-SYNCFUSION</span>}

 @section ControlsSection{                                
	     @{
             ViewBag.Title = " Essential XlsIO (Excel) : CLRObjects : Syncfusion";
}
     
@{Html.BeginForm("CLRObjects", "XlsIO", FormMethod.Post);
{
    <div class="Common">
        <div class="tablediv">
            <div class="rowdiv">
                Essential XlsIO allows you to import/export data from/to CLR Objects. CLR object usually holds a set of instance variables or properties, also known as attributes.
                <br />
                <br />This sample demonstrates the usage of CLR objects using Essential XlsIO.
            </div>
            <br />
            <div class="rowdiv">
                <label>
                    Click the "Export To Excel" button to view an Excel spreadsheet generated by Essential XlsIO. Please
                    note that Microsoft Excel Viewer or Microsoft Excel is required to view the resultant document.
                </label>
            </div>
            <br />
            </div>
    </div>       

@(Html.EJ().Grid<MVCSampleBrowser.Controllers.Sales>("Export")
        .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.datasource).UpdateURL("Update").Adaptor(AdaptorType.RemoteSaveAdaptor))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Normal);  })
        .AllowScrolling()
        .ScrollSettings(scroll => { scroll.Height(250).Width(550); })
        .Columns(col =>
        {
            col.Field("ID").HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Right).Width(15).ValidationRules(v => v.AddRule("required", true).AddRule("number", true)).Add();
            col.Field("SalesPerson").HeaderText("SalesPerson").Width(70).TextAlign(TextAlign.Center).Add();
            col.Field("SalesJanJune").HeaderText("SalesJanJune").Width(50).TextAlign(TextAlign.Right).Add();
            col.Field("SalesJulyDec").HeaderText("SalesJulyDec").Width(50).TextAlign(TextAlign.Center).Add();
            col.Field("Change").HeaderText("Change").Width(50).TextAlign(TextAlign.Center).Add();
        })
)
        <br />
        <div class="rowdiv">
            <div class="celldiv">
                <label>
                    <strong> Save As :</strong>
                </label>
                <input id="rbtnXls" type="radio" name="SaveOption" value="Xls" />
                <label for="rbtnXls">
                    XLS
                </label>
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                <input id="rbtnXlsx" type="radio" name="SaveOption" value="Xlsx" checked="checked" />
                <label for="rbtnXlsx">
                    XLSX
                </label>
            </div>
            <br />
            <div class="celldiv">
                <input id="input" class="buttonStyle" type="submit" name="button" value="Input Template" style="width:165px;" />
                <input id="import" class="buttonStyle" type="submit"  name="button" value="Import From Excel" style="width:165px;" />
                <input id="export" class="buttonStyle" @ViewBag.exportButtonState type="submit" name="button" value="Export To Excel" style="width:165px;"/>
            </div>
        </div>

    <script type="text/javascript">
        
        function EnableExport()
        {
            $('#export').prop("disabled", false);

        }
    </script>
    
 Html.EndForm();
    } }
     }

